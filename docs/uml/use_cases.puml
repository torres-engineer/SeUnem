@startuml
/'
    SeUnem - A free software platform for participatory decision-making and
    collective event management.
    Copyright (C) 2025  Jo√£o Augusto Costa Branco Marado Torres
    <torres.dev@disroot.org>

    This file is part of SeUnem.

    SeUnem is free software: you can redistribute it and/or modify it under the
    terms of the GNU Affero General Public License as published by the Free
    Software Foundation, either version 3 of the License, or (at your option)
    any later version.

    SeUnem is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
    more details.

    You should have received a copy of the GNU Affero General Public License
    along with SeUnem.  If not, see <https://www.gnu.org/licenses/>
'/

' mainframe This is a mainframe
' header Use Cases UML Diagram

' footer (c) 2025 Torres

' title Proletarian's Use Cases

' caption The class Proletarian owns multiple use cases

left to right direction

actor Proletarian
' actor BankSystem
' actor NotificationService


Proletarian -- (List events)
(List events) <|-- (List event groups)
(List events) ..> (List event groups) : <<extend>>
Proletarian -- (See event)

(Apply filters) ..> (List events) : <<extend>>
(Apply ordering) ..> (List events) : <<extend>>

(Authenticate) <.. (Follow event) : <<include>>
(Authenticate) <.. (Manage products) : <<include>>

Proletarian -- (Create event)
(Join event) <.. (Create event) : "auto-joins creator"
Proletarian -- (Join event)
(Follow event) <.. (Join event) : <<include>>
Proletarian -- (Follow event)

Proletarian -- (Unfollow event)
(Follow event) <.. (Unfollow event) : <<include>>
Proletarian -- (Leave event)
(Join event) <.. (Leave event) : <<include>>

Proletarian "1..*" -- "0..1" (Participate in event decisions)
(Join event) <.. (Participate in event decisions) : <<include>>
(Participate in event decisions) <|-- (Update event)
(Participate in event decisions) <|-- (Propose product needs)
(Participate in event decisions) <|-- (Allocate products from bank)
(Participate in event decisions) <|-- (Manage products)
(Participate in event decisions) <|-- (Cancel event)
(Propose product needs) <.. (Allocate products from bank) : "<<usage>>\ndepends on defined needs"
(Join event) ..> (Participate in event decisions) : <<extend>>

(Transfer ownership) ..> (Manage products) : <<extend>>
Proletarian -- (Add product to bank)

/'
I also know that use cases are Classifiers, so they can have Dependencies,
Associations, Generalizations, and Substitutions. Also, the extension can have
conditions and extension point, plus and explanation which can be made with a
simple text in the diagram, a more robust text in a separated file, or just
another diagram, probably a State of a State Machine diagram or a Activity
Diagram which also give the post and pre conditions.
'/

@enduml
